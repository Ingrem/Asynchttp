1. Отлично что реализовали консольный http сервис. Но задача подразумевала использование паттерна MVC и IIS сервера для работы с http запросами. 
	Это нужно будет переделать.
2. В задание ничего не сказано про клиентские приложения для отправки http запросов.
	Если Вам удобно использовать собственные http клиенты для тестирования - отлично.
	Но проверять работоспособность сервисов мы будем с помощью любого REST клиента.
	Например, можно использовать плагин для хрома Advanced REST Client.
	Основная разница в том что в REST клиентах намного проще смотреть все содержимое http запроса.  
	Так же при таком подходе Вам не нужно тратить дополнительное время на разработку собственных http клиентов. 

Хочу начать с одного организационного момента: при ответе на мои пистьма пожалуйста выбирайте "Ответить всем", а не просто "Ответить". 

По задаче у Вас довольно хороший прогресс. По коду пока тоже особых заменчаний нет. 
Поскольку Вы пока в процессе изменений по моему прошлому письму ниже приведу список тех изменений которые хотелось бы видеть:
1. Все конфигурационные параметры(http адреса, порты, логины и т.д) должны быть вынесены в config файл. 
2. Для RabbitMQ нужно будет создать пользователя и создавать соединения с логином/паролем, вместо использования пользователя по умолчанию.
3. Доступ к контроллерам должен быть реализован как написано в задании. Т.е. 2 основных запроса:
а) Получение команды:
Method: GET
URL: http://<service>/commands/{deviceId}/{timeout}
Пример: http://localhost:2333/command/dev5/10
б) Передача команды
Method: POST
URL: http://<service>/commands
Body:
 {
  "deviceId": "{deviceId}", // deviceId (string) - идентификатор устройства
  "command": "{command details}" // command json содержащий детали команды.
}
Пример:

http://localhost:2333/commands
{
  "deviceId": "dev5",
  "command": {
          "commandName": "upgrade"
          "parameters":[
              {
                "name":"url",
                "value":"http://test-url"
              }
            ]
        }
  }

Response на запросы должен возвращать http code в зависимости от того успешено или нет прошел запрос, а так же json, как описано в задаче. 

Проверять работу сервисов удобно в любом REST клиенте, например Advanced REST Client для хрома.

4. Unit тесты имеет смысл начать реализовывать только после завершения работы над основной функциональностью. 